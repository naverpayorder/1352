/**
 * 네이버페이(C1) 주문서 관련 스크립트 정보
 */
nmp.createModule("nmp.front.order.order_sheet.checkout",{
	_htInstance : {},
	_htElementSelector : {
		"root" : "#order",
		"orderForm" : "#orderForm",
		"certForm" : "#certForm",
		"orderFormByPoint" : "#orderFormByPoint",
		"discountPriceTable" : "#discountPriceTable",					// 할인 정보 테이블
		"accountInfoTable" : "#accountInfo",						// 결제 정보 테이블
		"calculationDiscountTarget" : "._calculationDiscountTarget",		// 할인금액 계산 대상
		"refuncAccountNo" : "._refuncAccountNo"		// 할인금액 계산 대상
	},
	initialize : function() {
		this._initializeEventAttach();
		this._initializeFormHelper();
		this._setDefaultTextInTextBox();
	},
	_setDefaultTextInTextBox :function () {
		var defaultTextArr = $A();
		$A($$("._text_20")).forEach(function(el){
			defaultTextArr.push({"sName" : el.name , "sDefaultValue" :"20자 내로 입력해주세요." });
		}, this);
		$A($$("._text_50")).forEach(function(el){
			defaultTextArr.push({"sName" : el.name , "sDefaultValue" :"50자 내로 입력해주세요." });
		}, this);
		
		this._htInstance["form_helper"].setDefaultText(defaultTextArr.$value());
	},
	/**
	 *
	 */
	_initializeEventAttach : function() {
		var orderForm = this._getElement("orderForm");
		
		nmp.event_delegator.attach(orderForm, "mouseover", this);
		nmp.event_delegator.attach(orderForm, "mouseout", this);
		
		nmp.front.order.ui.initializeEventDeligator(this._getElement("root", true), this);
		
		var discountPriceTable = this._getElement("discountPriceTable");
		if(discountPriceTable != undefined){
			nmp.event_delegator.attach(discountPriceTable, "keyup", this);
		}
		
		nmp.front.order.ui.initializeEventDeligator(this._getElement("root", true), this);
	},
	_initializeFormHelper : function() {
		var sAction = "";
		sAction = "/orderSheetCreate/" + this._getOption("orderSnapshotKey");
		if(this._getOption("orderClass") == "INTEGRATION_CART"){
			sAction += "/integrationCart";
		}else{
			sAction += "/checkout";
		}
		this._htInstance["form_helper"] = new nmp.component.FormHelper({
			"elRoot" : this._getElement("orderForm", true),
			"bAjaxRequest" : true,
			"bValidationOnly" : false,
			"sAction" : sAction
		});
		
		
		if(this._getElement("certForm", true)){
			sAction = "/checkout/approval/checkCertificatePay";
			this._htInstance["cert_form_helper"] = new nmp.component.FormHelper({
				"elRoot" : this._getElement("certForm", true),
				"bAjaxRequest" : true,
				"bValidationOnly" : false,
				"sAction" : sAction
			});
			
			/**
			 * 인증용 form.
			 */
			this._htInstance["cert_form_helper"] = new nmp.component.FormHelper({
				"elRoot" : this._getElement("certForm", true),
				"bAjaxRequest" : true,
				"sAction" : "/checkout/approval/checkCertificatePay"
			});
			this._htInstance["cert_form_helper"].attach("success", function(we){
				var htResult = we.htResult;
				we.stop();
				if(htResult.bSuccess == true){
					var returnValue = htResult.htReturnValue;
					if (returnValue.action != 'create' && document.pay.nmp == undefined) {
						nmp.front.order.order_sheet.checkout.createTempOrder(we);
						return;
					}

					if (returnValue.action == 'apply') {
						document.pay.nmp.front.order.order_sheet.payPg.goPay();
					}  
					else if (returnValue.action == 'loadPopup') {
						document.pay.nmp.front.order.order_sheet.payPg.loadPopup();
					}
					else if (returnValue.action == 'loadPopup') {
						document.pay.nmp.front.order.order_sheet.payPg.loadPopup();
					}
					else if (returnValue.action == 'loadPopup') {
						document.pay.nmp.front.order.order_sheet.payPg.loadPopup();
					}
					else if (returnValue.action == 'create') {
						nmp.front.order.order_sheet.checkout.createTempOrder(we);
					}
				}
			});
			this._htInstance["cert_form_helper"].attach("fail", function(we){
				console.log('가주문 생성은 되었으나, 인증이 완료되지 않았으므로 새로운 가주문데이터를 생성.');
				nmp.front.order.order_sheet.checkout.createTempOrder(we);
			});
			this._htInstance["cert_form_helper"].attach("submit", function(we){});
		}
		
		var particularRealLength = $$("em.particularDeliveryMemoRealLength");
		var particularMaxLength = $$("em.particularDeliveryMemoMaxLength");
		var particularMemo = $$(".particularDeliveryMemo");
		var lengthIndicatorList = $A();
		var numberCheckList = $A();
		
		$A(particularMemo).forEach(function(v,i,a){
			lengthIndicatorList.push({
				"sName" : a[i].name, 
	            "nMaxLength" : 500,
	            "sType" :"char", 
	            "elRealLength": particularRealLength[i],
	            "elMaxLength":particularMaxLength[i]
			});
		});
		lengthIndicatorList.push({"sName" : "deliveryMemo", 
		            "nMaxLength" : 500,
		            "sType" :"char", 
		            "elRealLength": $$.getSingle("em.deliveryMemoRealLength"),
		            "elMaxLength":$$.getSingle("em.deliveryMemoMaxLength")
		             });
		
		$A($$("._text_20")).forEach(function(v,i,a){
			lengthIndicatorList.push({
				"sName" : a[i].name, 
				"nMaxLength" : 20
			});
		});
		
		$A($$("._text_50")).forEach(function(v,i,a){
			lengthIndicatorList.push({
				"sName" : a[i].name, 
				"nMaxLength" : 50
			});
		});
		
		this._htInstance["form_helper"].setLengthIndicator(lengthIndicatorList.$value());
		
		$A($$("._onlyPriceTarget")).forEach(function(v,i,a){numberCheckList.push({"sName" : a[i].name, "rxPattern" : /[0-9,]+/g});});
		$A($$("._onlyNumberTarget")).forEach(function(v,i,a){numberCheckList.push({"sName" : a[i].name, "rxPattern" : /[0-9]+/g});});
		this._htInstance["form_helper"].setTypeCheck(numberCheckList.$value());
		var autoFocusTarget = [
		                       {"sName" : "deliveryAddress.telNo1_1"},
		                       {"sName" : "deliveryAddress.telNo1_2", "nLength" : 4},
		                       {"sName" : "deliveryAddress.telNo1_3", "nLength" : 4}
		                       ];
		this._htInstance["form_helper"].setAutoFocus(autoFocusTarget);
		
		if($$.getSingle("select[name=deliveryAddress.telNo2_1]") != undefined){
			autoFocusTarget= [{"sName" : "deliveryAddress.telNo2_1"},
			                       {"sName" : "deliveryAddress.telNo2_2", "nLength" : 4},
			                       {"sName" : "deliveryAddress.telNo2_3", "nLength" : 4}];
			this._htInstance["form_helper"].setAutoFocus(autoFocusTarget);
		}
		if($$.getSingle("input[name=purchaserSocialSecurityNoFirst]") != undefined){
			autoFocusTarget= [{"sName" : "purchaserSocialSecurityNoFirst", "nLength" : 6},
			                  {"sName" : "purchaserSocialSecurityNoSecond", "nLength" : 7}];
			this._htInstance["form_helper"].setAutoFocus(autoFocusTarget);
		}
		
		autoFocusTarget= [{"sName" : "receiptInfo.socialNumberFirst", "nLength" : 6},
		                       {"sName" : "receiptInfo.socialNumberSecond", "nLength" : 7}];
		this._htInstance["form_helper"].setAutoFocus(autoFocusTarget);
		
		autoFocusTarget= [{"sName" : "receiptInfo.cellPhoneFirst"},
		                       {"sName" : "receiptInfo.cellPhoneSecond", "nLength" : 4},
		                       {"sName" : "receiptInfo.cellPhoneThird", "nLength" : 4}];
		this._htInstance["form_helper"].setAutoFocus(autoFocusTarget);
		
		autoFocusTarget= [{"sName" : "receiptInfo.receiptCardFirst", "nLength" : 4},
		                       {"sName" : "receiptInfo.receiptCardSend", "nLength" : 4},
		                       {"sName" : "receiptInfo.receiptCardThird", "nLength" : 4},
		                       {"sName" : "receiptInfo.receiptCardFourth", "nLength" : 6}];
		this._htInstance["form_helper"].setAutoFocus(autoFocusTarget);
		
		autoFocusTarget= [{"sName" : "receiptInfo.receiptBizNoFirst", "nLength" : 3},
		                       {"sName" : "receiptInfo.receiptBizNoSecond", "nLength" : 2},
		                       {"sName" : "receiptInfo.receiptBizNoThird", "nLength" : 5}];
		this._htInstance["form_helper"].setAutoFocus(autoFocusTarget);
		
		var orderForm = this._getElement("orderForm",true);
		
		var hiddenTag = nmp.front.order.fieldMergeUtil._appendHiddenElement(orderForm,"_callback");
		hiddenTag.value="nmp.front.order.order_sheet.refreshPage";
		
		nmp.front.order.ui.AttachCommonInteractionToFormHelper(this._htInstance["form_helper"]);
	},
	/**
	 * 임시 주문 데이터 저장 성공시 callback method
	 * @param we
	 */
	_createTempOrderCallback : function(htResult){
		if (htResult != null && htResult.bSuccess == true) {
			$$.getSingle("input[name=tempOrderId]").value = htResult.htReturnValue.resultMap.orderId;
	        this._htInstance["isProgress"] = false;
			
	        var payMethod = nmp.front.order.order_sheet.getPayMethod();
			if(payMethod == "POINT" || payMethod == "CHARGED_POINT"){
				var form = $Form(this._getElement("orderFormByPoint").$value());
				form.value('ord_seq', htResult.htReturnValue.resultMap.orderId);
				form.value('payMethodCode', payMethod);
				form.value('tempOrderId', htResult.htReturnValue.resultMap.orderId);
				form.value('payMeansClass', payMethod);

				var bUsePointAllYn = nmp.front.order.order_sheet.getUsePointAllYn();
				if (bUsePointAllYn != undefined) {
					form.value('usePointAllYn', bUsePointAllYn);
				}

				if (payMethod == "CHARGED_POINT") {
					var htChargePointInfo = nmp.front.order.order_sheet.getChargePointInfo();
					if (htChargePointInfo != undefined && htChargePointInfo["amount"] > 0) {
						form.value('pointChargeCorpCd', htChargePointInfo["bankCode"]);
						form.value('pointChargeCorpKey', htChargePointInfo["accountKey"]);
						form.value('pointChargeAmount', htChargePointInfo["amount"]);
					}
				}
			}

			if (nmp.front.order.order_sheet.getNaverInitToken() == undefined || nmp.front.order.order_sheet.getNaverInitToken() == "") {
				this.orderApplyWithAuthentification();
			} else {
				nmp.front.order.order_sheet.registerNaverPayPassword();
			}
			return;
		} else{
			this._htInstance["isProgress"] = false;
			nmp.front.order.order_sheet.viewFailResult(htResult);
		}
	},
	/**
	 * 결제 수단별 결제 모듈을 시작한다.
	 */
	orderApply : function() {
		var payMethod = nmp.front.order.order_sheet.getPayMethod();
		if(payMethod == "POINT" || payMethod == "CHARGED_POINT"){
			try{
				nmp.front.order.order_sheet.showPayLoadingLayer();
			}catch(e){}
			var form = $Form(this._getElement("orderFormByPoint").$value());
			form.$value().method = "POST";
			form.$value().action = "/orderSheetApply/view";
			form.$value().target = "pay";
			form.submit();
		} else {
			var frm = $Form($$.getSingle("form._orderForm")).$value();
			frm.action="/checkout/approval/certificatePay";
			frm.target="pay";
			frm.submit();
		}
	},
	/**
	 * 배송지 정보를 저장 및 기본 배송지로 설정한다.
	 * @param we
	 */
	modifyPurchaseDeliveryInfo : function(fCallback) {
		if($$.getSingle("input[name=isAddDeliveryList]") && ($$.getSingle("input[name=isAddDeliveryList]").checked || $$.getSingle("input[name=isSelectDefaultDeliveryPlace]").checked )){
			this._htInstance["form_helper"] = new nmp.component.FormHelper({
				"elRoot" : this._getElement("orderForm", true),
				"bAjaxRequest" : true,
				"sAction" : "/customer/modifyDeliveryInfo"
			});
			this._htInstance["form_helper"].attach("success", fCallback);
			this._htInstance["form_helper"].submit();
		}else{
			return false;
		}
	},
	/**
	 * 결제하기 처리, 임시주문데이터를 생성 하거나 기인증건이 있는지를 확인.
	 * @param we
	 */
	account : function(we) { 
		// 1차 validation 절차.
		// 1. 이미 생성된 가주문번호에 대해 '인증' 이 완료되었는지 확인.
		// 2. 이미 '인증' 이 완료된 주문의 경우 background 로 sessionio를 이용하여 완료처리.
		// 3. '인증' 이 완료되지 않은경우 가주문데이터 생성처리 수행.
		var tempOrderNo = $$.getSingle("input[name=tempOrderId]").value;
		if (tempOrderNo != undefined && tempOrderNo != '' && nmp.front.order.order_sheet.getPayMethod() != "DON") {
			
			this._htInstance["cert_form_helper"].setValue("tempOrderNo", tempOrderNo);
			this._htInstance["cert_form_helper"].submit();
		} else {
			// 기존 임시주문이 없으므로 가주문데이터 새로 생성.
			this.createTempOrder(we);
		}
		
	},
	
	/**
	 * 결제하기 처리, 임시주문데이터를 생성한다.
	 * @param {Object} we
	 */
	createTempOrder : function(we) { 
		if(this._htInstance["isProgress"] == undefined || this._htInstance["isProgress"] == false){
			this._htInstance["isProgress"] = true;
		}else{
			return;
		}
		
		var _wfValidationCallback = $Fn(this._validationCallback, this).bind();
		nmp.requestAjax(this._htInstance["form_helper"].getActionUrl() + "/validate",
					{"orderCreateJson" : nmp.front.order.order_sheet.createOrderCreateFormJson(),
					"_callback" : "nmp.front.order.order_sheet.checkout.createTempOrder()"
					}, 
					{
					method : "post",
					onload : _wfValidationCallback
					});
	},
	_validationCallback : function(htResult){
		if (htResult != null && htResult.bSuccess == true) {
			if (htResult.htReturnValue.resultMap.authentificationLevel == "ATH099") {
				nmp.moveUrl("/orderSheet/result/blocked");
				
				nmp.front.order.order_sheet.closePayPopup();
				return;
			}

			if (htResult.htReturnValue.resultMap.giftCertificationPurchaseLimitExceeded != undefined && htResult.htReturnValue.resultMap.giftCertificationPurchaseLimitExceeded) {
				alert("모바일쿠폰/상품권 및 지류/상품권 카테고리 상품 일 결제금액 한도 50만원을 초과하여 결제가 불가합니다.");
				this._htInstance["isProgress"] = false;
				return;
			}

			if (htResult.htReturnValue.resultMap.under14age != undefined && htResult.htReturnValue.resultMap.under14age) {
				alert("미성년자 결제한도 금액 초과로 결제가 불가능합니다.");
				this._htInstance["isProgress"] = false;
				return;
			}

			if (htResult.htReturnValue.resultMap.under19age != undefined && htResult.htReturnValue.resultMap.under19age) {
				if (htResult.htReturnValue.resultMap.remainingOrderableAmount == undefined) {
					alert("현재 미성년자 한도 확인이 되지 않아 주문이 불가합니다.\n잠시 후 재시도 부탁드립니다.");
				} else {
					alert("미성년자 월 결제한도 45만원 금액 초과로 결제가 불가능합니다." + ((!isNaN(htResult.htReturnValue.resultMap.remainingOrderableAmount) && htResult.htReturnValue.resultMap.remainingOrderableAmount > 0) ? "\n이번 달 추가 결제 가능 금액은 " + nmp.front.order.ui.setThousandComma(htResult.htReturnValue.resultMap.remainingOrderableAmount) + "원 입니다." : ""));
				}
				this._htInstance["isProgress"] = false;
				return;
			}

			if (nmp.front.order.order_sheet.showOpenbankingAgreeLayer()) {
				nmp.front.order.order_sheet.showLayer("openbankingAgree");
				return;
			}

			nmp.front.order.order_sheet.setFdsUuid(htResult.htReturnValue.resultMap.fdsUuid);
			nmp.front.order.order_sheet.setNaverToken(htResult.htReturnValue.resultMap.naverToken);
			nmp.front.order.order_sheet.setAuthentificationToken(htResult.htReturnValue.resultMap.authentificationToken);
			nmp.front.order.order_sheet.setAuthentificationLevel(htResult.htReturnValue.resultMap.authentificationLevel);

			if (htResult.htReturnValue.resultMap.naverInitToken != undefined) {
				nmp.front.order.order_sheet.setNaverInitToken(htResult.htReturnValue.resultMap.naverInitToken);
			}

			this.createTempOrderAfterValidate();
		}else{
			this._htInstance["isProgress"] = false;
			nmp.front.order.order_sheet.viewFailResult(htResult);
		}
	},
	createTempOrderAfterValidate : function(){
		var _wfSuccessCallback = $Fn(this._createTempOrderCallback, this).bind();
		nmp.requestAjax(this._htInstance["form_helper"].getActionUrl(),
				{"orderCreateJson" : nmp.front.order.order_sheet.createOrderCreateFormJson(),
				"_callback" : "nmp.front.order.order_sheet.checkout.createTempOrderAfterValidate()"}, 
				{
				method : "post",
				onload : _wfSuccessCallback
				});
	},
	/**
	 * 배송 메모 정보 토글(일괄/개별)
	 * @param we
	 */
	changeDeliveryMemo : function(we) {
		$Element($$.getSingle("div.deliveryProductMemo")).toggle();
		$Element($$.getSingle("div.deliveryMemo")).toggle();
	},
	/**
	 * 결제수단 입력 정보 노출/숨기기
	 * @param isVisible
	 */
	visibleControlSettlement : function(isVisible){
		if(isVisible){
			this._getElement("accountInfoTable").show();
		}else{
			this._getElement("accountInfoTable").hide();
		}
	},
	/**
	 * 결제 수단 변경마다 각 등록 폼을 보여준다.
	 * @param we
	 * @deprecated order_sheet.js로 함수 통합
	 */
	changePayment : function(we){
		nmp.front.order.order_sheet.addClassOnRadio("ul._paymethod > li",we.element.parentNode);

		var paymentMeansCode = we.element.value;
		var tr_paymeans = $$("._tr_paymeans");
		$A(tr_paymeans).forEach(function(v,i,a){
			a[i].style.display="none";
		});
		
		if(paymentMeansCode == "MOBILE"){
			$A($$(".mobile")).forEach(function(v,i,a){
				$Element(a[i]).toggle();
			});
		}else if(paymentMeansCode == "VIRTUAL_ACCOUNT"){
			$A($$(".virtualAccount")).forEach(function(v,i,a){
				$Element(a[i]).toggle();
			});
		}else if(paymentMeansCode == "BANK"){
			$A($$(".bank")).forEach(function(v,i,a){
				$Element(a[i]).toggle();
			});
		}
		
		nmp.front.order.order_sheet.viewCheckCashReceiptForm();
	},
	/**
	 * 배송정책 레이어 팝업 제어
	 * @param we
	 * @param isVisible
	 * @param bundleCode
	 */
	controlDeliveryPolicyPopup : function(we, isVisible, bundleCode){
		if(isVisible == "true"){
			$Element($$.getSingle("div .deliveryPolicy_"+bundleCode)).css({
				left : we.pos().pageX+"px",
				top : we.pos().pageY+"px"
			}); 
			$Element($$.getSingle("div .deliveryPolicy_"+bundleCode)).show();
		}else{
			$Element($$.getSingle("div .deliveryPolicy_"+bundleCode)).hide();
		}	
	},
	/**
	 * 이전 페이지로 돌아가기
	 */
	previousPage : function(we){
		var backUrl = this._getOption("backUrl");
		if(backUrl != ""){
			nmp.moveUrl(backUrl);
		}else{
			alert("이전페이지로 갈 수 없습니다.");
		}
	},
	moveOrderDone : function(payMeansClass, htReturnValue){
		if(htReturnValue.orderId != undefined){
			if(nmp.front.order.order_sheet.storage){
				nmp.front.order.order_sheet.storage.removeOrderInfo();
			}
			location.href="/orderSheet/result/"+htReturnValue.orderId + "/checkout";
		}else{
			try{
				nmp.front.order.order_sheet.resetTempLayer();
			}catch(e){}
			var params ={};
			params["errorMessage"]=htReturnValue.errorMessage;
			nmp.openPopup("/orderSheetPopup/pay/fail",["width=520", "height=450"], "payFailPop",params);
		}
	},
	orderApplyWithAuthentification : function() {
		// 결제 인증 수행
		switch (nmp.front.order.order_sheet.getAuthentificationLevel()) {
			case "ATH001":
				this.orderApply();
				break;
			case "ATH002":
			case "ATH003":
				nmp.front.order.order_sheet.openAuthentificationPopup();
				break;;
			case "ATH098":
				nmp.front.order.order_sheet.confirmCheckPayLimit();
				break;
			case "ATH099":
				break;
			default:
				break;
		}
	},
	getRootElement : function() {
		return this._getElement("root");
	},
	"" : ""
});